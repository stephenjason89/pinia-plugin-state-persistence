import{_ as i,b as a,a9 as e,o as n}from"./chunks/framework.Bvd2_HY-.js";const d=JSON.parse('{"title":"Advanced Use Cases","description":"","frontmatter":{},"headers":[],"relativePath":"guide/advance-usage.md","filePath":"guide/advance-usage.md","lastUpdated":1758915778000}'),t={name:"guide/advance-usage.md"};function h(l,s,p,k,r,F){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="advanced-use-cases" tabindex="-1">Advanced Use Cases <a class="header-anchor" href="#advanced-use-cases" aria-label="Permalink to &quot;Advanced Use Cases&quot;">​</a></h1><p>This page explores advanced options and configurations available in your project to enhance state management and persistence. These options provide developers with powerful tools to create robust, efficient, and user-friendly applications.</p><h2 id="onrestore" tabindex="-1"><code>$onRestore</code> <a class="header-anchor" href="#onrestore" aria-label="Permalink to &quot;\`$onRestore\`&quot;">​</a></h2><p>The <code>$onRestore</code> method helps you wait for the initial store restoration to complete, especially when working with asynchronous storage like <code>localForage</code> or <code>indexedDB</code>. This eliminates timing issues where components mount before async storage data has been loaded.</p><h3 id="problem-it-solves" tabindex="-1">Problem it Solves <a class="header-anchor" href="#problem-it-solves" aria-label="Permalink to &quot;Problem it Solves&quot;">​</a></h3><p>When using asynchronous storage, the store initialization happens before the data has been loaded from storage. This can cause issues in component <code>onMounted</code> hooks where you need to check if persisted data exists before making server requests.</p><h3 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes dracula github-light vp-code" style="--shiki-dark:#F8F8F2;--shiki-light:#24292e;--shiki-dark-bg:#282A36;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;"> store</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> useUserStore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">// Promise-based (async/await)</span></span>
<span class="line"><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">onMounted</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">async</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> () </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">  await</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">$onRestore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">  // Safe to check persisted data</span></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">  if</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">!</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">store.userData.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;">length</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">    await</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">fetchUserData</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">// Callback-based</span></span>
<span class="line"><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">onMounted</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(() </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">$onRestore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(() </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">    // Safe to check persisted data</span></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">    if</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">!</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">store.userData.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;">length</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">fetchUserData</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    }</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">});</span></span></code></pre></div><h2 id="onpersist" tabindex="-1"><code>$onPersist</code> <a class="header-anchor" href="#onpersist" aria-label="Permalink to &quot;\`$onPersist\`&quot;">​</a></h2><p>The <code>$onPersist</code> method helps you wait for persistence operations to complete, especially when working with asynchronous storage. This is useful when you need to ensure data has been saved before proceeding with operations like showing success messages or navigating away.</p><h3 id="example-usage-1" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage-1" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes dracula github-light vp-code" style="--shiki-dark:#F8F8F2;--shiki-light:#24292e;--shiki-dark-bg:#282A36;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;"> store</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> useUserStore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">// Promise-based (async/await)</span></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> saveData</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> async</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> () </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">updateProfile</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">({ name</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">John</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">, email</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">john@example.com</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> });</span></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">  await</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">$onPersist</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">  // Safe to show success or navigate</span></span>
<span class="line"><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">  showSuccessMessage</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">Saved!</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">// Callback-based</span></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> saveData</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> () </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">updateProfile</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">({ name</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">John</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">, email</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">john@example.com</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">$onPersist</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(() </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">    // Safe to show success or navigate</span></span>
<span class="line"><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">    showSuccessMessage</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">Saved!</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">};</span></span></code></pre></div><h2 id="restore" tabindex="-1"><code>$restore</code> <a class="header-anchor" href="#restore" aria-label="Permalink to &quot;\`$restore\`&quot;">​</a></h2><p>The <code>$restore</code> function allows you to manually synchronize the state from persistent storage back into the Pinia store. While <code>$restore</code> is automatically called during initialization, you may use it in scenarios where:</p><ul><li>The persistent storage is updated manually and needs to be synced back to the store.</li><li>State modifications occur outside the scope of the normal flow.</li></ul><h3 id="example-usage-2" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage-2" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes dracula github-light vp-code" style="--shiki-dark:#F8F8F2;--shiki-light:#24292e;--shiki-dark-bg:#282A36;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;"> store</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> useStore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">// Restore the state from storage manually</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">$restore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span></code></pre></div><p>Use this functionality sparingly for specific cases to ensure the store stays in sync with storage.</p><h2 id="persist" tabindex="-1"><code>$persist</code> <a class="header-anchor" href="#persist" aria-label="Permalink to &quot;\`$persist\`&quot;">​</a></h2><p>The <code>$persist</code> function forces the store to persist its current state into the configured storage. Normally, persistence is automatically handled via <code>$subscribe</code>, but <code>$persist</code> is useful in scenarios where:</p><ul><li>State changes are not detected by <code>$subscribe</code>.</li><li>Custom logic requires explicitly saving the state.</li></ul><h3 id="example-usage-3" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage-3" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes dracula github-light vp-code" style="--shiki-dark:#F8F8F2;--shiki-light:#24292e;--shiki-dark-bg:#282A36;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;"> store</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> useStore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6272A4;--shiki-light:#6A737D;">// Force persist the current state to storage manually</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">store.</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">$persist</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">();</span></span></code></pre></div><p>This is particularly helpful in batch updates or custom save operations that bypass normal mutation flows.</p><h2 id="object-key-persistence" tabindex="-1">Object Key Persistence <a class="header-anchor" href="#object-key-persistence" aria-label="Permalink to &quot;Object Key Persistence&quot;">​</a></h2><p>The plugin supports persisting state properties on separate keys when an object is provided for the <code>key</code> option. This allows finer control over how state properties are stored.</p><h3 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes dracula github-light vp-code" style="--shiki-dark:#F8F8F2;--shiki-light:#24292e;--shiki-dark-bg:#282A36;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> { defineStore } </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">pinia</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">export</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;"> useExampleStore</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> defineStore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">example</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">, {</span></span>
<span class="line"><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">  state</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> () </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    userId</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#BD93F9;--shiki-light:#005CC5;"> 1</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    token</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">Bearer ...</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  }),</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  persist</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    key</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      userId</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">user-id-storage-key</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      token</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">user-token-storage-key</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">});</span></span></code></pre></div><h3 id="behavior" tabindex="-1">Behavior <a class="header-anchor" href="#behavior" aria-label="Permalink to &quot;Behavior&quot;">​</a></h3><ul><li>Each state property specified in the <code>key</code> object is serialized and stored individually under its respective storage key.</li><li>Properties not included in the <code>key</code> object will fall back to the default storage behavior and will use <code>store.$id</code> as the storage key.</li><li>This approach is particularly useful for large stores where persisting state properties to different storage keys is needed.</li></ul><h2 id="multiple-storage-support" tabindex="-1">Multiple Storage Support <a class="header-anchor" href="#multiple-storage-support" aria-label="Permalink to &quot;Multiple Storage Support&quot;">​</a></h2><p>The plugin supports persisting state properties to multiple storages by allowing the <code>persist</code> option to accept an array of persistence configurations. This enables fine-grained control over where and how state properties are stored.</p><h3 id="example-configuration-1" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration-1" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes dracula github-light vp-code" style="--shiki-dark:#F8F8F2;--shiki-light:#24292e;--shiki-dark-bg:#282A36;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> { defineStore } </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">pinia</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">export</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#005CC5;"> useExampleStore</span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;"> defineStore</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">example</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">, {</span></span>
<span class="line"><span style="--shiki-dark:#50FA7B;--shiki-light:#6F42C1;">  state</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> () </span><span style="--shiki-dark:#FF79C6;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    userId</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#BD93F9;--shiki-light:#005CC5;"> 1</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    token</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">Bearer ...</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    preferences</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> { theme</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">dark</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  }),</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  persist</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> [</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      key</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">user-data</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      storage</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> localStorage,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      include</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> [</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">userId</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">token</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">],</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      key</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;"> &quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">preferences-storage</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      storage</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> sessionStorage,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">      include</span><span style="--shiki-dark:#FF79C6;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;"> [</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F1FA8C;--shiki-light:#032F62;">preferences</span><span style="--shiki-dark:#E9F284;--shiki-light:#032F62;">&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">],</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">    },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">  ],</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#24292E;">});</span></span></code></pre></div><h3 id="behavior-1" tabindex="-1">Behavior <a class="header-anchor" href="#behavior-1" aria-label="Permalink to &quot;Behavior&quot;">​</a></h3><ul><li>Each persistence configuration applies to specific state properties based on the <code>include</code> and <code>exclude</code> options.</li><li>Different storages can be used for different pieces of state (e.g., <code>localStorage</code> for authentication and <code>sessionStorage</code> for UI preferences).</li><li>When multiple persistence configurations apply to the same state keys, they will be processed in order, and the last configuration may overwrite earlier ones.</li><li>The <code>overwrite</code> option is not allowed as persistence is sequential, with later configurations overriding previous ones.</li></ul><p>This feature is particularly useful for applications requiring fine control over storage strategies, such as segregating sensitive authentication data from non-sensitive UI preferences.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>The <code>$restore</code> and <code>$persist</code> functions, along with comprehensive plugin configurations like object key persistence and multiple storage support, provide flexibility and power for state management. By hooking into Pinia’s <code>$subscribe</code>, most persistence needs are automatically managed, ensuring seamless state synchronization. These tools offer additional control for edge cases, such as handling manual updates to storage, unique custom scenarios, or persisting individual state properties to specific keys and storages. Leverage these options to build sophisticated applications with reliable persistence and efficient state synchronization.</p>`,39)]))}const g=i(t,[["render",h]]);export{d as __pageData,g as default};
